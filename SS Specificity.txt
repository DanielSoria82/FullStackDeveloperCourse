/*===primer video===*/
What Is CSS Specificity, and the Specificity for Inline, Internal, and External CSS?

/*===segundo video===*/
What Is the Universal Selector, and What Is Its Specificity?
The universal selector (*) is a special type of CSS selector that matches any element in the document.
It is often used to apply a style to all elements on the page, which can be useful for resetting or normalizing styles across different browsers.
The universal selector can be used to select all elements within a specific context or globally across the entire document.
<head>
  <style>
    * {
      color: blue;
    }
    p {
      color: red;
    }
    .highlight {
      color: green;
    }
    #unique {
      color: purple;
    }
  </style>
</head>
<body>
  <p id="unique" class="highlight">This text has multiple styles applied.</p>
</body>
The universal selector has the lowest specificity value of any selector. It contributes 0 to all parts of the specificity value (0, 0, 0, 0). This means that any other selector, including type selectors, class selectors, ID selectors, and inline styles, will override the styles set by the universal selector.

/*===tercer video===*/
What Is the Specificity for Type Selectors?
Type selectors -also known as "element selectors"- are straightforward to use and are written simply as the tag name of the element you want to style. Type selectors have a relatively low specificity compared to other selectors. The specificity value for a type selector is (0, 0, 0, 1). This means that type selectors will be overridden by class selectors, ID selectors, and inline styles, but can still apply styles unless those higher-specificity rules are present.

/*===cuarto video===*/
Class selectors allows developers to target multiple elements with the same class attribute and apply consistent styling. Class selectors are defined by a period (.) followed by the class name. They can be applied to any element in the HTML document. Class selectors have a higher specificity than type selectors but lower than ID selectors and inline styles. The specificity value for a class selector is (0, 0, 1, 0). This means that class selectors can override type selectors, but they can be overridden by ID selectors and inline styles. Class selectors can be combined with other selectors to create more specific rules.

/*===quinto video===*/
What Is the Specificity for ID Selectors?
ID selectors are allows developers to apply styles to specific elements with unique identifiers. ID selectors are defined by a hash symbol (#) followed by the ID name. They should be unique within an HTML document, meaning no two elements should share the same ID. ID selectors have a very high specificity, higher than type selectors and class selectors, but lower than inline styles. The specificity value for an ID selector is (0, 1, 0, 0). This means that ID selectors can override class selectors and type selectors but can be overridden by inline styles.

/*===sexto video===*/
What Is the important Keyword, and What Are the Best Practices for Using It?
The !important keyword in CSS is used to give a style rule the highest priority, allowing it to override any other declarations for a property. When used, it forces the browser to apply the specified style, regardless of the specificity of other selectors.
.para {
  background-color: black !important;
  color: white !important;
}
The !important keyword in CSS is used to give a style rule the highest priority, effectively overriding other declarations, including those with higher specificity and inline styles. However, overusing the !important keyword can lead to difficulties in maintaining and debugging your CSS, as it breaks the natural cascading of styles and can lead to unintended consequences.

/*===septimo video===*/
How Does the Cascade Algorithm Work at a High Level?
The Cascade Algorithm is the process the browser uses to decide which CSS rules to apply when there are multiple styles targeting the same element. It ensures that the most appropriate styles are used, based on a set of well-defined rules.
> relevance. The browser first filters all the CSS rules to find those that actually apply to the element in question. This includes matching selectors and considering media queries that might be in effect.
> origin and importance. CSS can come from different sources: the browser’s default styles (user-agent), styles set by the user, and styles written by the author (you).
> importance of each rule, giving priority to rules marked with !important, which override other rules regardless of their source.
> specificity. When two rules from the same origin and importance level apply, the rule with the higher specificity will be applied.
> order of appearance. When two rules have the same specificity, the one that appears last in the CSS will be applied.
By considering relevance, origin and importance, specificity, scope, and order of appearance, the Cascade Algorithm ensures that your CSS behaves predictably, allowing you to design more complex and nuanced web pages.

/*===octavo video===*/
How Does Inheritance Work with CSS at a High Level?
Inheritance determines how styles are passed down from parent elements to their child elements. in CSS, certain properties can be inherited by child elements from their parent elements. In CSS, not all properties are inherited by default. For example, properties like color, font-family, and line-height are inherited. This means that if you set the text color on a parent element, all of its child elements will inherit that color unless you specifically override it.
<div style="color: blue;">
  This is the parent element.
  <p>This is the child element inheriting the color.</p>
</div>
In this case, both the parent div and the child p will display their text in blue because the color is inherited.
On the other hand, properties like margin, padding, border, and background are not inherited by default. If you want a child element to inherit these styles, you need to explicitly set them, either directly on the child element or by using the inherit keyword.
The inherit keyword can be used to force inheritance of a property from a parent element, even if that property is not normally inherited.
<div style="padding: 20px;">
  This is the parent element with padding.
  <p style="padding: inherit;">This is the child element inheriting the padding.</p>
</div>
In this case, the child p element will inherit the 20px of padding from its parent div element.
It’s important to remember that inheritance only works in one direction – from parent to child. If you override a style on a child element, it won’t affect the parent element.
